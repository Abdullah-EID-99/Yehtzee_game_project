/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Yehtzee_game_project;

import static Yehtzee_game_project.Client.sInput;
import game.Message;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dell
 */
public class Game extends javax.swing.JFrame {

    public static Game ThisGame;
    public JLabel rival_name;
    public int myselection = -1;

    JLabel dices_labeles[] = new JLabel[5];
    JLabel hedef_labeles[] = new JLabel[5];
    JCheckBox dices_checkBoxes[] = new JCheckBox[5];
    DefaultTableModel tableModel = new DefaultTableModel();

    static void clearLabeles(JLabel labeles[]) {
        for (int q = 0; q < labeles.length; q++) {
            labeles[q].setIcon(null);
        }
    }

    static void setVisibleCheckBoxes(JCheckBox checkBoxes[], boolean isVisible) {
        for (int q = 0; q < checkBoxes.length; q++) {
            checkBoxes[q].setVisible(isVisible);
        }
    }

   

    public Game() {
        initComponents();
        Yehtzee.startGame();
        rival_name = rival_name_label;
        dices_labeles[0] = dice_1;
        dices_labeles[1] = dice_2;
        dices_labeles[2] = dice_3;
        dices_labeles[3] = dice_4;
        dices_labeles[4] = dice_5;
        hedef_labeles[0] = dice_6;
        hedef_labeles[1] = dice_7;
        hedef_labeles[2] = dice_8;
        hedef_labeles[3] = dice_9;
        hedef_labeles[4] = dice_10;
        dices_checkBoxes[0] = CheckBox_6;
        dices_checkBoxes[1] = CheckBox_7;
        dices_checkBoxes[2] = CheckBox_8;
        dices_checkBoxes[3] = CheckBox_9;
        dices_checkBoxes[4] = CheckBox_10;
        setVisibleCheckBoxes(dices_checkBoxes, false);
        tableModel.setColumnIdentifiers(new String[]{"Type", "player1", "player2"});
        List<String> scoreTypes = Yehtzee.readFile("src/yehtzee/yeht.txt");
        for (String scoreType : scoreTypes) {
            tableModel.addRow(new String[]{scoreType, null, null});
        }
        scoreTable.setModel(tableModel);
        Random rn = new Random();
        for (int q = 0; q < dices_labeles.length; q++) {
            BufferedImage img = null;
            try {
                //img = ImageIO.read(new File("src/Yehtzee_game_project/dice_" + (rn.nextInt(6) + 1) + ".png"));
                img = ImageIO.read(new File("src/Yehtzee_game_project/dice_" + (6) + ".png"));
            } catch (IOException e) {
                e.printStackTrace();
            }
            Image dimg = img.getScaledInstance(dice_5.getWidth(), dice_5.getHeight(),
                    Image.SCALE_SMOOTH);
            ImageIcon icon = new ImageIcon(dimg);
            dices_labeles[q].setIcon(icon);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        scoreTable = new javax.swing.JTable();
        rollDice_btn = new javax.swing.JButton();
        dice_1 = new javax.swing.JLabel();
        dice_2 = new javax.swing.JLabel();
        dice_4 = new javax.swing.JLabel();
        dice_5 = new javax.swing.JLabel();
        dice_3 = new javax.swing.JLabel();
        dice_6 = new javax.swing.JLabel();
        dice_7 = new javax.swing.JLabel();
        dice_8 = new javax.swing.JLabel();
        dice_9 = new javax.swing.JLabel();
        dice_10 = new javax.swing.JLabel();
        CheckBox_10 = new javax.swing.JCheckBox();
        CheckBox_6 = new javax.swing.JCheckBox();
        CheckBox_7 = new javax.swing.JCheckBox();
        CheckBox_8 = new javax.swing.JCheckBox();
        CheckBox_9 = new javax.swing.JCheckBox();
        rival_name_label = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        name_txt_field = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        send_message = new javax.swing.JButton();
        messge_txt = new javax.swing.JTextField();
        recieved_message = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        scoreTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        scoreTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scoreTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                scoreTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(scoreTable);

        rollDice_btn.setText("Roll Dice");
        rollDice_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollDice_btnActionPerformed(evt);
            }
        });

        dice_1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yehtzee/die-face.png"))); // NOI18N

        dice_2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yehtzee/die-face.png"))); // NOI18N

        dice_4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yehtzee/die-face.png"))); // NOI18N

        dice_5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yehtzee/die-face.png"))); // NOI18N

        dice_3.setBackground(new java.awt.Color(255, 255, 255));
        dice_3.setForeground(new java.awt.Color(255, 255, 255));
        dice_3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yehtzee/die-face.png"))); // NOI18N
        dice_3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        dice_8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dice_8MouseClicked(evt);
            }
        });

        jLabel2.setText("Name: ");

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Start");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        send_message.setText("send mesg");
        send_message.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                send_messageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(name_txt_field, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dice_6, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(CheckBox_6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(48, 48, 48)
                                        .addComponent(dice_9, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(67, 67, 67)
                                        .addComponent(CheckBox_9)))
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(dice_7, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(42, 42, 42)
                                        .addComponent(dice_8, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(CheckBox_7)
                                        .addGap(75, 75, 75)
                                        .addComponent(CheckBox_8))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(51, 51, 51)
                                        .addComponent(dice_10, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(67, 67, 67)
                                        .addComponent(CheckBox_10)))
                                .addGap(71, 71, 71))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(rival_name_label, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(148, 148, 148)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(dice_1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(dice_2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(dice_3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(dice_4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(dice_5, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(159, 159, 159)
                                .addComponent(rollDice_btn)))
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(messge_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(send_message))
                            .addComponent(recieved_message, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rival_name_label, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(108, 108, 108)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dice_6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(CheckBox_6)
                                .addGap(4, 4, 4)
                                .addComponent(dice_9, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(CheckBox_9))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dice_7, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dice_8, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CheckBox_7)
                                    .addComponent(CheckBox_8))
                                .addGap(4, 4, 4)
                                .addComponent(dice_10, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(CheckBox_10)))))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dice_1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dice_2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dice_3, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dice_4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dice_5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(messge_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(send_message)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(recieved_message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rollDice_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(name_txt_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
int rollCount = 0;
    private void rollDice_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollDice_btnActionPerformed
        // TODO add your handling code here:
        if (rollCount < 3) {
            setVisibleCheckBoxes(dices_checkBoxes, true);
            int dices[] = Yehtzee.rollDice(hedef_labeles);
            Yehtzee.play(dices);
            for (int i = 0; i < Yehtzee.temp_scores.length; i++) {
                if (Yehtzee.scores[i] == -1) {
                    tableModel.setValueAt(Yehtzee.temp_scores[i], i, 1);
                }
            }
            Yehtzee.printArray(dices);
            //Yehtzee.printScore();
            Yehtzee.printArray(Yehtzee.upperSectionCombinations);

            clearLabeles(dices_labeles);
            rollCount++;
        }
    }//GEN-LAST:event_rollDice_btnActionPerformed

    private void dice_8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dice_8MouseClicked
        // TODO add your handling code here:
        dices_labeles[8 - dices_labeles.length].setIcon(hedef_labeles[8 - 6].getIcon());
        hedef_labeles[8 - 6].setIcon(null);
    }//GEN-LAST:event_dice_8MouseClicked

    private void scoreTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scoreTableMousePressed
        // TODO add your handling code here:
        scoreTable.setColumnSelectionAllowed(true);
        int row = scoreTable.getSelectedRow();
        int column = scoreTable.getSelectedColumn();
        if (row != -1 && column == 1 && Yehtzee.scores[row] == -1) {
            if (JOptionPane.showConfirmDialog(this, "are you sure you want this score?") == JOptionPane.OK_OPTION) {
                tableModel.setValueAt(Yehtzee.temp_scores[row], row, 1);
                Yehtzee.scores[row] = Yehtzee.temp_scores[row];
                Message msg = new Message(Message.Message_Type.SelectedScore);
                Integer score[] = new Integer[2];
                score[0] = row;
                score[1] = Yehtzee.temp_scores[row];
                msg.content = score;
                try {
                    sOutput.writeObject(msg);
                } catch (IOException ex) {
                    Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);
                }
                rollDice_btn.setEnabled(false);
                scoreTable.setEnabled(false);
                scoreTable.clearSelection();
                for (int i = 0; i < Yehtzee.scores.length; i++) {
                    if (Yehtzee.scores[i] == -1) {
                        tableModel.setValueAt(0, i, 1);
                    }
                }
                for (JLabel dice : dices_labeles) {
                    int x = dice.getX();
                    dice.setLocation(x, 40);
                }
                for (int i = 0; i < dices_labeles.length; i++) {
                    dices_labeles[i].setIcon(hedef_labeles[i].getIcon());
                }
                clearLabeles(hedef_labeles);
                setVisibleCheckBoxes(dices_checkBoxes, false);
                rollCount = 0;
            }
        }
    }//GEN-LAST:event_scoreTableMousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        for (JLabel dice : dices_labeles) {
            int x = dice.getX();
            int y = (dice.getY() == 40) ? 316 : 40;
            dice.setLocation(x, y);

        }
    }//GEN-LAST:event_jButton1ActionPerformed
    public static Socket socket;

    //verileri almak için gerekli nesne
    public static ObjectInputStream sInput;
    //verileri göndermek için gerekli nesne
    public static ObjectOutputStream sOutput;
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new Thread(() -> {

            try {
                // Client Soket nesnesi
                socket = new Socket("localhost", 2000);
                System.out.println("Servera bağlandı");
                // input stream
                sInput = new ObjectInputStream(socket.getInputStream());
                // output stream
                sOutput = new ObjectOutputStream(socket.getOutputStream());

                //ilk mesaj olarak isim gönderiyorum
                Message msg = new Message(Message.Message_Type.Name);
                msg.content = name_txt_field.getText();
                sOutput.writeObject(msg);
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
            //soket bağlı olduğu sürece dön
            jButton2.setEnabled(false);
            name_txt_field.setEnabled(false);
            while (socket.isConnected()) {
                try {
                    //mesaj gelmesini bloking olarak dinyelen komut
                    Message received = (Message) (sInput.readObject());
                    //mesaj gelirse bu satıra geçer
                    //mesaj tipine göre yapılacak işlemi ayır.
                    switch (received.type) {
                        case Name:
                            break;
                        case RivalConnected:
                            String name = received.content.toString();
                            rival_name_label.setText(name);
//                        Game.ThisGame.txt_rival_name.setText(name);
//                        Game.ThisGame.btn_pick.setEnabled(true);
//                        Game.ThisGame.btn_send_message.setEnabled(true);
//                        Game.ThisGame.tmr_slider.start();
                            break;
                        case Disconnect:
                            break;
                        case Text:
                            String d = received.content.toString();
                            recieved_message.setText(d);
//                        Game.ThisGame.txt_receive.setText(received.content.toString());
                            break;
                        case SelectedScore:
                            Integer rivalSelectedScore[] = (Integer[]) received.content;
                            System.out.println("score " + rivalSelectedScore[1]);
                            tableModel.setValueAt(rivalSelectedScore[1], rivalSelectedScore[0], 2);
                            break;
                        case Bitis:
                            break;

                    }

                } catch (IOException ex) {

                    Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                    //Client.Stop();
                    break;
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                    //Client.Stop();
                    break;
                }
            }
        }).start();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void send_messageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_send_messageActionPerformed
        // TODO add your handling code here:
        Message msg = new Message(Message.Message_Type.Text);
        msg.content = messge_txt.getText();
        try {
            sOutput.writeObject(msg);
        } catch (IOException ex) {
            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_send_messageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CheckBox_10;
    private javax.swing.JCheckBox CheckBox_6;
    private javax.swing.JCheckBox CheckBox_7;
    private javax.swing.JCheckBox CheckBox_8;
    private javax.swing.JCheckBox CheckBox_9;
    private javax.swing.JLabel dice_1;
    private javax.swing.JLabel dice_10;
    private javax.swing.JLabel dice_2;
    private javax.swing.JLabel dice_3;
    private javax.swing.JLabel dice_4;
    private javax.swing.JLabel dice_5;
    private javax.swing.JLabel dice_6;
    private javax.swing.JLabel dice_7;
    private javax.swing.JLabel dice_8;
    private javax.swing.JLabel dice_9;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField messge_txt;
    private javax.swing.JTextField name_txt_field;
    private javax.swing.JLabel recieved_message;
    private javax.swing.JLabel rival_name_label;
    private javax.swing.JButton rollDice_btn;
    private javax.swing.JTable scoreTable;
    private javax.swing.JButton send_message;
    // End of variables declaration//GEN-END:variables
}
